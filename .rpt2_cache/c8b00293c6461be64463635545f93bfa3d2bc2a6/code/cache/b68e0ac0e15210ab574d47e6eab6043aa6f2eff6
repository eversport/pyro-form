{"code":"import React from 'react';\r\nimport { getValueFromEvent, isEvent } from './helper';\r\nimport { PyroProvider } from './PyroContext';\r\nconst isPromise = (value) => Boolean(value) && typeof value.then === 'function';\r\nclass PyroForm extends React.PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.state = {\r\n            values: this.props.initialValues,\r\n            touched: Object.keys(this.props.initialValues).reduce((previousValue, currentValue) => (Object.assign({}, previousValue, { [currentValue]: false })), {}),\r\n            errors: {},\r\n            isSubmitting: false,\r\n            submitCount: 0,\r\n        };\r\n        this.getPyroFormActions = () => ({});\r\n        this.handleSubmit = async (e) => {\r\n            if (e) {\r\n                e.preventDefault();\r\n            }\r\n            const { onSubmit } = this.props;\r\n            if (onSubmit) {\r\n                const result = onSubmit(this.state.values, this.getPyroFormActions);\r\n                if (isPromise(result)) {\r\n                    this.setState({\r\n                        isSubmitting: true,\r\n                    });\r\n                    await result;\r\n                }\r\n            }\r\n            this.setState(state => ({\r\n                isSubmitting: false,\r\n                submitCount: state.submitCount + 1,\r\n            }));\r\n        };\r\n        this.handleChange = (name, value) => {\r\n            // Check if passed value is an event and use it's value\r\n            if (isEvent(value)) {\r\n                value = getValueFromEvent(value);\r\n            }\r\n            this.setState(state => ({\r\n                values: Object.assign({}, state.values, { [name]: value }),\r\n            }), () => {\r\n                this.handleValidate();\r\n                if (this.props.onChange) {\r\n                    this.props.onChange(this.state.values, this.getPyroFormActions());\r\n                }\r\n            });\r\n        };\r\n        this.handleBlur = (name) => {\r\n            this.setTouched(name);\r\n        };\r\n        // @ts-ignore Since the usage of name and value below is also ignored this will throw an unused parameter error\r\n        this.setTouched = (name) => {\r\n            this.setState(state => ({\r\n                touched: Object.assign({}, state.touched, { [name]: true }),\r\n            }));\r\n        };\r\n        this.isValid = () => {\r\n            return Object.keys(this.state.errors).length === 0;\r\n        };\r\n        this.handleValidate = () => {\r\n            const { onValidate, onValid, onInvalid } = this.props;\r\n            if (!onValidate)\r\n                return;\r\n            this.setState(state => ({\r\n                errors: onValidate(state.values, this.getPyroFormActions()),\r\n            }), () => {\r\n                if (this.isValid()) {\r\n                    onValid && onValid();\r\n                }\r\n                else {\r\n                    onInvalid && onInvalid();\r\n                }\r\n            });\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.handleValidate();\r\n    }\r\n    render() {\r\n        // TODO: Add some error handling here if no children are passed\r\n        const contextValue = {\r\n            values: this.state.values,\r\n            errors: this.state.errors,\r\n            touched: this.state.touched,\r\n            handleChange: this.handleChange,\r\n            handleBlur: this.handleBlur,\r\n        };\r\n        return (React.createElement(PyroProvider, { value: contextValue }, this.props.children({\r\n            handleSubmit: this.handleSubmit,\r\n            values: this.state.values,\r\n            errors: this.state.errors,\r\n            hasErrors: !this.isValid(),\r\n        })));\r\n    }\r\n}\r\nexport default PyroForm;\r\n//# sourceMappingURL=PyroForm.js.map","map":"{\"version\":3,\"file\":\"PyroForm.js\",\"sourceRoot\":\"\",\"sources\":[\"../../src/PyroForm.tsx\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"C:/Users/lukas/Desktop/pyro-form/PyroForm.d.ts","text":"import React from 'react';\r\nimport { PyroFormErrors, PyroFormTouched, PyroFormValues } from './typings';\r\ninterface PyroFormActions {\r\n}\r\ninterface RenderProps<Values> {\r\n    handleSubmit: () => void;\r\n    values: Values;\r\n    hasErrors: boolean;\r\n    errors: PyroFormErrors<Values>;\r\n}\r\ninterface PyroFormProps<Values extends PyroFormValues> {\r\n    initialValues: Values;\r\n    children: (renderProps: RenderProps<Values>) => React.ReactNode;\r\n    onSubmit?: (values: Values, actions: PyroFormActions) => void | Promise<void>;\r\n    onChange?: (values: Values, actions: PyroFormActions) => void | Promise<void>;\r\n    onValidate?: (values: Values, actions: PyroFormActions) => PyroFormErrors<Values>;\r\n    onValid?: () => void;\r\n    onInvalid?: () => void;\r\n}\r\ninterface PyroFormState<Values> {\r\n    values: Values;\r\n    errors: PyroFormErrors<Values>;\r\n    touched: PyroFormTouched<Values>;\r\n    isSubmitting: boolean;\r\n    submitCount: number;\r\n}\r\ndeclare class PyroForm<Values extends {\r\n    [key: string]: any;\r\n}> extends React.PureComponent<PyroFormProps<Values>, PyroFormState<Values>> {\r\n    state: {\r\n        values: Values;\r\n        touched: PyroFormTouched<Values>;\r\n        errors: {};\r\n        isSubmitting: boolean;\r\n        submitCount: number;\r\n    };\r\n    componentDidMount(): void;\r\n    render(): JSX.Element;\r\n    private getPyroFormActions;\r\n    private handleSubmit;\r\n    private handleChange;\r\n    private handleBlur;\r\n    private setTouched;\r\n    private isValid;\r\n    private handleValidate;\r\n}\r\nexport default PyroForm;\r\n"}}
